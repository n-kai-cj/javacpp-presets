diff -ruN oneDNN-1.6.4/include/dnnl.hpp oneDNN-1.6.4-patch/include/dnnl.hpp
--- oneDNN-1.6.4/include/dnnl.hpp	2020-10-01 05:58:58.000000000 +0900
+++ oneDNN-1.6.4-patch/include/dnnl.hpp	2020-10-20 13:12:12.899881000 +0900
@@ -110,6 +110,8 @@
     static void wrap_c_api(dnnl_status_t status, const char *message) {
         if (status != dnnl_success) DNNL_THROW_ERROR(status, message);
     }
+
+    const std::string& toStdString() { return std::string(message).append(": status = ").append(std::to_string(status)); }
 };
 
 /// @cond DO_NOT_DOCUMENT_THIS
diff -ruN oneDNN-1.6.4/src/CMakeLists.txt oneDNN-1.6.4-patch/src/CMakeLists.txt
--- oneDNN-1.6.4/src/CMakeLists.txt	2020-10-01 05:58:58.000000000 +0900
+++ oneDNN-1.6.4-patch/src/CMakeLists.txt	2020-10-20 13:12:32.989881086 +0900
@@ -142,54 +142,6 @@
     -DDIR=\$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake
     -P ${PROJECT_SOURCE_DIR}/cmake/gen_mkldnn_compat_cmakes.cmake)")
 
-# Intel MKL-DNN compat libraries
-if (WIN32)
-    if (NOT MINGW)
-        set(prefix "")
-        set(ext ".lib")
-    else()
-        set(prefix "lib")
-        if (DNNL_LIBRARY_TYPE STREQUAL "SHARED")
-            set(ext ".dll.a")
-        else()
-            set(ext ".a")
-        endif()
-    endif()
-    add_custom_target(compat_libs ALL
-        ${CMAKE_COMMAND} -E copy
-        $<TARGET_LINKER_FILE_DIR:${LIB_NAME}>/$<TARGET_LINKER_FILE_NAME:${LIB_NAME}>
-        $<TARGET_LINKER_FILE_DIR:${LIB_NAME}>/${prefix}mkldnn${ext}
-        # Workaround for MSB8065 warning.
-        COMMAND ${CMAKE_COMMAND} -E touch "CMakeFiles/compat_libs"
-        DEPENDS ${LIB_NAME})
-    install(FILES $<TARGET_LINKER_FILE_DIR:${LIB_NAME}>/${prefix}mkldnn${ext}
-        DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
-else()
-    if(DNNL_LIBRARY_TYPE STREQUAL "SHARED")
-        set_ternary(ext APPLE ".dylib" ".so")
-        set(vers ".${DNNL_VERSION_MAJOR};.${DNNL_VERSION_MAJOR}.${DNNL_VERSION_MINOR}")
-    else()
-        set(ext ".a")
-        set(vers "")
-    endif()
-    foreach(ver "" ${vers})
-        set_ternary(ext_and_ver APPLE "${ver}${ext}" "${ext}${ver}")
-        get_property(lib_location TARGET ${LIB_NAME} PROPERTY LIBRARY_OUTPUT_DIRECTORY)
-        if(lib_location)
-            set(compat_link "${lib_location}/libmkldnn${ext_and_ver}")
-        else()
-            set(compat_link "${CMAKE_CURRENT_BINARY_DIR}/libmkldnn${ext_and_ver}")
-        endif()
-        add_custom_command(OUTPUT ${compat_link}
-            # to make the next command work fine
-            COMMAND ${CMAKE_COMMAND} -E remove -f ${compat_link}
-            COMMAND ${CMAKE_COMMAND} -E create_symlink libdnnl${ext_and_ver} ${compat_link}
-            DEPENDS ${LIB_NAME})
-        add_custom_target(compat_libs${ver} ALL DEPENDS ${compat_link})
-        install(FILES ${compat_link} DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
-    endforeach()
-endif()
-
 # Install custom find modules for transitive dependencies
 set(LIB_CONFIG_INSTALL_DIR_COMPAT "${CMAKE_INSTALL_LIBDIR}/cmake/mkldnn")
 if(DNNL_CPU_RUNTIME STREQUAL "TBB")
diff -ruN oneDNN-1.6.4/src/cpu/cpu_engine.cpp oneDNN-1.6.4-patch/src/cpu/cpu_engine.cpp
--- oneDNN-1.6.4/src/cpu/cpu_engine.cpp	2020-10-01 05:58:58.000000000 +0900
+++ oneDNN-1.6.4-patch/src/cpu/cpu_engine.cpp	2020-10-20 13:12:15.726881012 +0900
@@ -23,10 +23,31 @@
 #include "cpu/cpu_memory_storage.hpp"
 #include "cpu/cpu_stream.hpp"
 
+#include "cpu/x64/jit_uni_dw_conv_kernel_utils.hpp"
+
 namespace dnnl {
 namespace impl {
 namespace cpu {
 
+namespace x64 {
+template struct jit_uni_dw_conv_fwd_kernel<avx512_core, data_type::bf16>;
+template struct jit_uni_dw_conv_fwd_kernel<avx512_common, data_type::f32>;
+template struct jit_uni_dw_conv_fwd_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_fwd_kernel<sse41, data_type::f32>;
+
+template struct jit_uni_dw_conv_bwd_data_kernel<avx512_core, data_type::bf16>;
+template struct jit_uni_dw_conv_bwd_data_kernel<avx512_common, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_data_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_data_kernel<sse41, data_type::f32>;
+
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_core,
+        data_type::bf16>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_common,
+        data_type::f32>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<sse41, data_type::f32>;
+} // namespace x64
+
 status_t cpu_engine_t::create_memory_storage(
         memory_storage_t **storage, unsigned flags, size_t size, void *handle) {
     auto _storage = new cpu_memory_storage_t(this);
diff -ruN oneDNN-1.6.4/src/cpu/x64/jit_uni_dw_conv_kernel_utils.hpp oneDNN-1.6.4-patch/src/cpu/x64/jit_uni_dw_conv_kernel_utils.hpp
--- oneDNN-1.6.4/src/cpu/x64/jit_uni_dw_conv_kernel_utils.hpp	2020-10-01 05:58:58.000000000 +0900
+++ oneDNN-1.6.4-patch/src/cpu/x64/jit_uni_dw_conv_kernel_utils.hpp	2020-10-20 13:12:15.727881012 +0900
@@ -264,11 +264,6 @@
         scratchpad.book<float>(key_conv_padded_bias, jcp.oc);
 }
 
-template struct jit_uni_dw_conv_fwd_kernel<avx512_core, data_type::bf16>;
-template struct jit_uni_dw_conv_fwd_kernel<avx512_common, data_type::f32>;
-template struct jit_uni_dw_conv_fwd_kernel<avx2, data_type::f32>;
-template struct jit_uni_dw_conv_fwd_kernel<sse41, data_type::f32>;
-
 template <cpu_isa_t isa, data_type_t kernel_dt>
 struct jit_uni_dw_conv_bwd_data_kernel {
 
@@ -398,11 +393,6 @@
     UNUSED(jcp);
 }
 
-template struct jit_uni_dw_conv_bwd_data_kernel<avx512_core, data_type::bf16>;
-template struct jit_uni_dw_conv_bwd_data_kernel<avx512_common, data_type::f32>;
-template struct jit_uni_dw_conv_bwd_data_kernel<avx2, data_type::f32>;
-template struct jit_uni_dw_conv_bwd_data_kernel<sse41, data_type::f32>;
-
 template <cpu_isa_t isa, data_type_t kernel_dt>
 struct jit_uni_dw_conv_bwd_weights_kernel {
 
@@ -578,12 +568,6 @@
     jcp.nthr = jcp.nthr_g * jcp.nthr_mb;
 }
 
-template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_core,
-        data_type::bf16>;
-template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_common,
-        data_type::f32>;
-template struct jit_uni_dw_conv_bwd_weights_kernel<avx2, data_type::f32>;
-template struct jit_uni_dw_conv_bwd_weights_kernel<sse41, data_type::f32>;
 } // namespace x64
 } // namespace cpu
 } // namespace impl
