diff -ruN ngraph-0.26.0/src/ngraph/frontend/onnx_import/onnx.cpp ngraph-0.26.0-patch/src/ngraph/frontend/onnx_import/onnx.cpp
--- ngraph-0.26.0/src/ngraph/frontend/onnx_import/onnx.cpp	2019-10-12 07:49:03.000000000 +0900
+++ ngraph-0.26.0-patch/src/ngraph/frontend/onnx_import/onnx.cpp	2019-10-16 20:08:21.156269032 +0900
@@ -33,18 +33,10 @@
         {
             namespace error
             {
-                struct file_open : ngraph_error
+                struct data_parse : ngraph_error
                 {
-                    explicit file_open(const std::string& path)
-                        : ngraph_error{"Failure opening file: " + path}
-                    {
-                    }
-                };
-
-                struct stream_parse : ngraph_error
-                {
-                    explicit stream_parse(std::istream&)
-                        : ngraph_error{"Failure parsing data from the provided input stream"}
+                    explicit data_parse(const std::string& data)
+                        : ngraph_error{"failure parsing data from the string"}
                     {
                     }
                 };
@@ -52,20 +44,17 @@
             } // namespace error
         }     // namespace detail
 
-        std::shared_ptr<Function> import_onnx_model(std::istream& sin, const Weights& weights)
+        std::shared_ptr<Function> import_onnx_model(const std::string& data, const Weights& weights)
         {
             onnx::ModelProto model_proto;
             // Try parsing input as a binary protobuf message
-            if (!model_proto.ParseFromIstream(&sin))
+            if (!model_proto.ParseFromString(data))
             {
-                // Rewind to the beginning and clear stream state.
-                sin.clear();
-                sin.seekg(0);
-                google::protobuf::io::IstreamInputStream iistream(&sin);
+                google::protobuf::io::ArrayInputStream iistream(data.data(), data.size());
                 // Try parsing input as a prototxt message
                 if (!google::protobuf::TextFormat::Parse(&iistream, &model_proto))
                 {
-                    throw detail::error::stream_parse{sin};
+                    throw detail::error::data_parse{data};
                 }
             }
 
@@ -80,16 +69,6 @@
             return function;
         }
 
-        std::shared_ptr<Function> import_onnx_model(const std::string& path, const Weights& weights)
-        {
-            std::ifstream ifs{path, std::ios::in | std::ios::binary};
-            if (!ifs.is_open())
-            {
-                throw detail::error::file_open{path};
-            }
-            return import_onnx_model(ifs, weights);
-        }
-
         void register_operator(const std::string& name,
                                std::int64_t version,
                                const std::string& domain,
diff -ruN ngraph-0.26.0/src/ngraph/frontend/onnx_import/onnx.hpp ngraph-0.26.0-patch/src/ngraph/frontend/onnx_import/onnx.hpp
--- ngraph-0.26.0/src/ngraph/frontend/onnx_import/onnx.hpp	2019-10-12 07:49:03.000000000 +0900
+++ ngraph-0.26.0-patch/src/ngraph/frontend/onnx_import/onnx.hpp	2019-10-16 20:08:21.157269032 +0900
@@ -73,19 +73,7 @@
         ///                   and providing through this parameters is invalid (the weights from
         ///                   the model  will take precedence).
         /// \return The function returns a nGraph function representing single output from graph.
-        std::shared_ptr<Function> import_onnx_model(std::istream& sin, const Weights& weights = {});
-
-        /// \brief Convert an ONNX model to nGraph functions
-        /// The function translated serialized ONNX model to nGraph functions. The ONNX model
-        /// is read from ONNX file.
-        /// \param filename  file name (relative or absolute path name),
-        /// \param weights  weights associated with the model. If weights are embedded into
-        ///                   the model this parameter shall be empty. Having weights in a model
-        ///                   and providing through this parameters is invalid (the weights from
-        ///                   the model  will take precedence).
-        /// \return The function returns a nGraph function representing single output from graph.
-        std::shared_ptr<Function> import_onnx_model(const std::string& filename,
-                                                    const Weights& weights = {});
+        std::shared_ptr<Function> import_onnx_model(const std::string& data, const Weights& weights = {});
 
     } // namespace onnx_import
 
